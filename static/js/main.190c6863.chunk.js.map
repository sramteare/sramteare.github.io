{"version":3,"sources":["components/calendar/calendar.tsx","components/card-shuffle/card-shuffle.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["WEEK_DAYS","TODAY_PROPS","className","Calendar","useState","Date","today","setToday","getDate","todayDate","setTodayDate","useEffect","getKey","idx","getFullYear","getMonth","lastDateLastMonth","lastDate","pad","getDay","date","calendarMonth","numDays","rows","Array","from","length","_","i","val","last","push","count","onClick","toLocaleString","year","month","day","map","CARD_TYPES_CLASS_NAME","CARD_NUMBER_LABEL","Map","CardShuffle","deck","setDeck","cardsDrawn","setCardsDrawn","shuffleDeck","arr","randomIndex","Math","floor","random","shuffle","drawCards","cardsDrew","pop","concat","num","InvertedCard","action","active","Card","identifier","cardsData","cardIndex","cardType","card","console","log","getDistinctCardById","get","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.190c6863.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nconst WEEK_DAYS = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thus\",\"Fri\",\"Sat\"];\nconst TODAY_PROPS = {className: \"today\", 'aria-label':\"Today\"}\nexport const Calendar = () => {\n    /** state */\n    const [today, setToday] = useState(new Date());\n    const [todayDate, setTodayDate] = useState(new Date().getDate());\n    useEffect(()=>setToday(new Date()), [])\n    useEffect(()=>setTodayDate(today.getDate()), [today])\n    /** actions */\n    const goBack =()=>{\n        setToday(new Date(today.getFullYear(), today.getMonth(), today.getDate()-1))\n    }\n    const goForward = ()=>setToday(new Date(today.getFullYear(), today.getMonth(), today.getDate()+1))\n    const getKey = (idx:number) => `${today.getFullYear()}-${today.getMonth()}-${idx}`;\n\n    /** view data */\n    const lastDateLastMonth = new Date(today.getFullYear(), today.getMonth(),0);\n    const lastDate = new Date(today.getFullYear(), today.getMonth()+1,0);\n    let pad = lastDateLastMonth.getDay();\n    let date = lastDateLastMonth.getDate();\n    const calendarMonth: Array<JSX.Element> = [];\n    // numdays used as keys\n    let numDays = 0;\n\n    // previous calendar dates\n    let rows = Array.from({\n        length:pad+1\n    }, (_,i)=>{\n        const val = date-pad;\n        pad--;\n        return <td  key={getKey(numDays++)} className=\"non-current\">{val}</td>;\n    });\n    \n    pad = lastDateLastMonth.getDay();\n    const last = lastDate.getDate();\n    let i = 0;\n    while(i < last){\n        if(rows.length % 7 === 0) {\n            calendarMonth.push(<tr key={getKey(calendarMonth.length+40)}>{rows}</tr>)\n            rows=[];\n        }\n        rows.push(<td key={getKey(numDays++)} {...(todayDate === i+1 ? TODAY_PROPS : {})}>{++i}</td>)\n    }\n    let count = 1;\n    // remaining days, from next month\n    \n    while(rows.length % 7 !== 0) {\n        rows.push(<td key={getKey(numDays++)} className=\"non-current\">{count}</td>);\n        ++count;\n    }\n    calendarMonth.push(<tr key={getKey(calendarMonth.length+40)}>{rows}</tr>)\n    \n    return (<div className=\"card calendar\">\n        <header className=\"calendar-header\">\n            <button className=\"clear\" onClick={goBack}>&lt;</button>\n            <span>{today.toLocaleString('default', { year: 'numeric', month: 'short', day:\"numeric\" })}</span>\n            <button className=\"clear\" onClick={goForward}>&gt;</button>\n        </header>\n        <table className=\"calendar-table\">\n            <thead><tr>{WEEK_DAYS.map( (day)=><th key={day}>{day}</th>)}</tr></thead>\n            <tbody>{\n               calendarMonth\n            }</tbody>\n        </table>\n        </div>);\n}","import React, { useEffect, useState } from \"react\";\nimport './css/card-shuffle.css'\n/**\n * \n * @returns Fisherâ€“Yates shuffle --- https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n */\nfunction shuffle(arr: number[]): number[]{\n    for(let i = arr.length - 1; i>0; --i){\n        const randomIndex = Math.floor( Math.random() * (i-1) );\n        [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]];\n    }\n    return arr;\n}\n//* 13 cards of 4 types\nconst SIZE_OF_DECK = 52;\nconst DRAW_SIZE = 4;\nconst CARD_TYPES_CLASS_NAME = ['spade', 'diamond', 'club', 'heart'];\nconst CARD_NUMBER_LABEL = new Map([\n    [0, 'A'],\n    [10, 'J'],\n    [11, 'Q'],\n    [12, 'K'],\n])\n/**\n * using simple math to distinguish between the cards\n * a default cards deck starts from ace of spades and next 12 cards of spades, to next 13 of diamonds, next 13 clubs, hearts.\n * we can number the cards(0 indexed) in this order and retrieve a card based on the index number 0- 51.\n * ex: \n * index 0 - Ace spades\n * index 1 - 2 spades\n * ...\n * index 13 - Ace of diamonds\n * ...\n * index 51 - King of hearts\n */\nfunction getDistinctCardById(cardIndex: number){\n    const cardType = Math.floor((cardIndex) / 13);\n    const card = (cardIndex) % 13;\n\n    console.log({cardIndex, cardType, card});\n    return {cardIndex, cardType, card};\n}\n/** Card shuffle main component */\nexport function CardShuffle () {\n    const [deck, setDeck] = useState([] as Array<number>);\n    const [cardsDrawn, setCardsDrawn] = useState([] as Array<number>);\n\n    useEffect(\n        ()=>{ \n            setDeck(shuffleDeck()) ;\n    }, [])\n    function shuffleDeck(){\n        return shuffle( \n            Array.from( {length: SIZE_OF_DECK}, (_, i)=>i)\n        );\n    }\n    function reShuffle () {\n        setDeck(shuffleDeck())\n        setCardsDrawn([]);\n    }\n    function drawCards(){\n        const cardsDrew: Array<number> = [];\n        for(let i = DRAW_SIZE; i>0; --i){\n            cardsDrew.push(deck.pop() as number)\n        }\n        setDeck([...deck]);\n        setCardsDrawn(cardsDrawn.concat(cardsDrew));\n    }\n\n    return (<div className='cards-game'>\n            <h4>Click on the deck to draw {DRAW_SIZE} cards.</h4>\n            <section className=\"flex last-to-end\">\n                <div className=\"cards-deck\"\n                aria-label=\"Deck of cards\">{deck.map( \n                    (num, i)=>{\n                        return <InvertedCard action={drawCards} active={i===deck.length-1}></InvertedCard>\n                    })}\n                </div>\n                <button className=\"clear icon-before refresh\" onClick={reShuffle}>Shuffle</button>\n            </section>\n            <section className=\"card cards-draw-plane\">{cardsDrawn.map( \n                    (num, i)=>{\n                        return <Card identifier={num}></Card>\n                    })}</section>\n        </div>);\n}\nfunction InvertedCard ({\n    active,\n    action\n}: {\n    active: boolean,\n    action: () => void\n}){\n    return active ? (<button className='clear playing-card inverted' onClick={action}></button>) \n    : (<div className='playing-card inverted'></div>)\n}\n\nexport function Card ({\n    identifier\n}: {\n    identifier: number  \n}) {\n    const cardsData = getDistinctCardById(identifier);\n    console.log(cardsData)\n    return (<div className={`playing-card icon-before icon-after ${CARD_TYPES_CLASS_NAME[cardsData.cardType]}`}>\n            <span>{CARD_NUMBER_LABEL.get(cardsData.card) ?? cardsData.card + 1}</span>\n            </div>)\n}","import React from 'react';\nimport './App.css';\nimport {Calendar} from './components/calendar/calendar';\nimport {CardShuffle} from './components/card-shuffle/card-shuffle'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Examples</h2>\n      <section><h3>React - Simple calendar</h3>\n        <p>Using React functional component for developing calendar widget. A simple calendar shows today's date and calendar view of the dates month. Right and left arrow buttons take user to previous or future dates.</p>\n        <hr aria-hidden=\"true\"/>\n        <Calendar />\n      </section>\n      <section><h3>React - Shuffle Cards</h3>\n        <p>This component renders a Card deck and a draw plane. The shuffle function uses Fisherâ€“Yates shuffle algorithm shuffle the deck. And when user clicks on the top card in the deck, 4 cards are drawn from the deck and displayed in the draw plane.</p>\n        <hr aria-hidden=\"true\"/>\n        <CardShuffle />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}